#pragma warning disable 1587
/// This example demonstrates how to create several buffers around the rivers. Four buffers are build sequentially, each of them as the separate shapefile.The overlapping shapes of each buffer are merged together. Then smaller buffers are subtracted from the larger ones, making "holes" in them. After it all 4 buffers are copied to a single shapefile with buffer distance field. Finally a color scheme ranging from blue to yellow is applied. An implementation of ICallback interface is used for reporting progress information.
///Here is a screenshot with the results of the code execution.
/// \image html CreateBuffer.png
/// \example CreateBuffer.cs

/// This example demonstrates how to manually select shapes and to show information about the their relative area. The shapes area selected by mouse dragging. Chart is updated automatically.
///Here is a screenshot with the results of the code execution.
/// \image html SelectBox.png
/// \example SelectBox.cs

/// This example demonstrates how to implement a simple GUI for editing attributes of the individual shapes. A shapefile with buildings will be shown.The labels which display the name and type of building are added. After clicking on a building a dialog will appear with text boxes to display attributes of the object. The new values will be saved after the clicking on OK button. The label on the map will be updated showing the new values of the attributes.
///Here is a screenshot with the results of the code execution.
/// \image html EditAttributes.png
/// \example EditAttributes.cs

/// This example demonstrates how to calculate the total length of rivers for each land parcel. Two shapefiles with rivers and land parcels act as an input. The code performs "intersects" test for each pair of river and parcel and computes intersection if such takes place. The positions of intersections are added as new polyline shapefile. The [Length] field is added to the parcels shapefile which will hold the total length of rivers.  Finally the values of the new field are visualized using bar charts.
///Here is a screenshot with the results of the code execution.
/// \image html IntersectionLength.png
/// \example IntersectionLength.cs

/// This example demonstrates how to how to add markers for the points of interest. The marker represented by image loaded from the file will be added on the mouse down event. The markers will be stored in the temporary in-memory shapefile.
///Here is a screenshot with the results of the code execution.
/// \image html MarkPoints.png
/// \example MarkPoints.cs

/// This example demonstrates how to visualize a moving vehicle on the map. The examples loads the layers with roads and buildings. A path for a vehicle is opened a separate shapefile with a single closed polyline shape. It is not added to the map. On the events generated by timer a new position of the vehicle is calculated assuming the constant speed. Then a red dot is displayed on the drawing layer on every even occurrence of the event (0, 2, 4, etc). The drawing layer is cleared on every new occurrence of the event. The usage of the drawing layer helps to avoid complete  redraws of the map which can be slow.
///Here is a screenshot with the results of the code execution.
/// \image html Tracking.png
/// \example Tracking.cs

/// This example demonstrates how to build a list of unique values of the given field and implement zooming to them from the context menu. After the right click on the map a context menu will be displayed with names of the buildings under submenu for each letter of the alphabet. Only the buildings with unique names will be included in the list. After choosing a particular name the extents of the map will be changed to display the corresponding building.
///Here is a screenshot with the results of the code execution.
/// \image html ZoomToValues.png
/// \example ZoomToValues.cs

/// This example demonstrates how to calculate the minimal distance from each building to the river and visualize it by charts.
///Here is a screenshot with the results of the code execution.
/// \image html MinimalDistance.png
/// \example MinimalDistance.cs

/// This example demonstrates how to show tootip with attributes of a shape in mousemove event. The tooltip is drawn as a label on the spatially referenced drawing layer. The smooth redraw of the tooltip is possible only for version higher than 4.8  where the redraw of the spatially referenced drawing layers can be done independently of the data layers. 
///Here is a screenshot with the results of the code execution.
/// \image html ToolTip.png
/// \example ToolTip.cs

/// This example demonstrates how to split a shapefile into several shapefiles according the values of the given attribute. For each unique value of the specified field a new shapefile will be created. Then each shape of the input shapefile will be copied to the one of the newly created shapefiles. To determine the list of the unique value generation of shapefile categories is made. Finally all new shapefiles are added to the map. A common color scheme is applied to them using ColorScheme class. Note: generally it is not needed split a shapefile into parts for applying color scheme. More likely use of such approach is splitting large shapefiles into several parts for faster rendering.
///Here is a screenshot with the results of the code execution.
/// \image html SplitByAttribute.png
/// \example SplitByAttribute.cs

/// This example demonstrates how to do a segmentation of layers by regular grid, to calculate the percentage of land usage for each cell and to show it as pie charts. The combined extents of 2 polygon shapefiles are split by regular grid with 4 by 4 cells, which is represented by polygon shapefile. An intersection for each cell of grid and each input shapefile is calculated.To visualize the relative area of polygons obtained by intersection a temporary shapefile with charts is created. Each chart denote the percentage of area covered by one of the input shapefiles in the given cell. Note: the grid mentioned in this example has nothing to do with Grid class provided by MapWinGIS. The displayed areas are represented in hectares.
///Here is a screenshot with the results of the code execution.
/// \image html Segmentation.png
/// \example Segmentation.cs

/// This example demonstrates how to remove shapes by mouse click and update their labels.
///Here is a screenshot with the results of the code execution.
/// \image html RemoveShape.png
/// \example RemoveShape.cs

/// This example demonstrates how to select labels on the map by handling SelectBoxFinal event of the map control.
///Here is a screenshot with the results of the code execution.
/// \image html LabelSelection.png
/// \example LabelSelection.cs

/// This example demonstrates how to generate unique value classification for point shapefile and to assign an icon for each category. The icons will be chosen from the folder on disk automatically provided that the name of the icon matches the value of the chosen field.
///Here is a screenshot with the results of the code execution.
/// \image html PointIcons.png
/// \example PointIcons.cs

/// This example demonstrates how to create custom line patterns.
///Here is a screenshot with the results of the code execution.
/// \image html LinePattern.png
/// \example LinePattern.cs

/// This example demonstrates how to to add randomly positioned labels to the image layer.
///Here is a screenshot with the results of the code execution.
/// \image html ImageLabels.png
/// \example ImageLabels.cs

/// This example demonstrates how to initialize GeoProjection object and retrieve an information from it.
///Here is a screenshot with the results of the code execution.
/// \image html GeoProjection.png
/// \example GeoProjection.cs

/// This example demonstrates how to calculate the area of polygons, to write it to the attribute table, and to display as labels.
///Here is a screenshot with the results of the code execution.
/// \image html CalculateArea.png
/// \example CalculateArea.cs

/// This example demonstrates how to create a point shapefile by placing 1000 points randomly.
///Here is a screenshot with the results of the code execution.
/// \image html CreatePointShapefile.png
/// \example CreatePointShapefile.cs

/// This example demonstrates how to create a polygon shapefile by placing 100 circles randomly.
///Here is a screenshot with the results of the code execution.
/// \image html CreatePolygonShapefile.png
/// \example CreatePolygonShapefile.cs

/// This example demonstrates how to add all the shapefiles and images with .tif and .png extensions from the specified folder to the map.
///Here is a screenshot with the results of the code execution.
/// \image html AddLayers.png
/// \example AddLayers.cs

/// This example demonstrates how to create a drawing layer from the specified shapefile.
///Here is a screenshot with the results of the code execution.
/// \image html ShapefileToDrawingLayer.png
/// \example ShapefileToDrawingLayer.cs

/// This example demonstrates how to select shapes with certain attributes using expression. The query string is: [type] = "residential" AND [osm_id] > 40000000.
///Here is a screenshot with the results of the code execution.
/// \image html SelectByQuery.png
/// \example SelectByQuery.cs

/// This example demonstrates how to create a shapefile holding circular polygons with holes.
///Here is a screenshot with the results of the code execution.
/// \image html PolygonsWithHoles.png
/// \example PolygonsWithHoles.cs

/// This example demonstrates how to select buildings which lie within specified distance from the parks.
///Here is a screenshot with the results of the code execution.
/// \image html SelectByDistance.png
/// \example SelectByDistance.cs

/// This example demonstrates how to sorts layers by the type of shapefile (first polygons, the polylines and finally points) and alphabetically.
///Here is a screenshot with the results of the code execution.
/// \image html SortLayers.png
/// \example SortLayers.cs

/// This example demonstrates how to highlight shapes when mouse cursor is over them and to show the attribute values in the status bar.
/// \example ShowAttributes.cs

/// This example demonstrates how to calculate area of polygons and to set 3 ranges of categories with different symbology. This example demonstrates quite elaborate specification of categories. In most cases much easier approaches can be used (see ShapefileCategories.Generate).
///Here is a screenshot with the results of the code execution.
/// \image html AddCategoryRange.png
/// \example AddCategoryRange.cs

/// This example demonstrates how to Adds labels to the layer without using automated procedures like Labels.Generate.
///Here is a screenshot with the results of the code execution.
/// \image html GenerateLabelsManually.png
/// \example GenerateLabelsManually.cs

/// This example demonstrates how to simulate motion of vehicles based on GPS data.
///Here is a screenshot with the results of the code execution.
/// \image html TrackCars.png
/// \example TrackCars.cs
#pragma warning restore 1587